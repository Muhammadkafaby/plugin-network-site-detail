name: Build and Release WordPress Plugin

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, intl, zip
        tools: composer
        
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: /tmp/composer-cache
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-
          
    - name: Install Composer dependencies
      run: composer install --no-dev --optimize-autoloader --no-interaction
      
    - name: Create plugin archive
      run: |
        # Create a temporary directory for the plugin
        mkdir -p /tmp/plugin-build/network-site-details
        
        # Copy main plugin files
        cp -r * /tmp/plugin-build/network-site-details/ || true
        
        # Remove development files from the build
        cd /tmp/plugin-build/network-site-details
        
        # Remove files based on .distignore patterns
        rm -rf .git
        rm -rf .github
        rm -rf .vscode
        rm -rf .idea
        rm -f .gitignore
        rm -f compress-vendor.ps1
        rm -f composer.lock
        
        # Clean vendor directory based on .distignore patterns
        find vendor -name "*.md" -delete
        find vendor -name "*LICENSE*" -delete
        find vendor -name "*CHANGELOG*" -delete
        find vendor -name "*README*" -delete
        find vendor -name "*CONTRIBUTING*" -delete
        find vendor -name "*UPGRADING*" -delete
        find vendor -name "*SECURITY*" -delete
        find vendor -name "*.json" -delete
        find vendor -name "*.lock" -delete
        find vendor -name "*.xml" -delete
        find vendor -name "*.dist" -delete
        find vendor -name "*.yml" -delete
        find vendor -name "*.yaml" -delete
        find vendor -name "*.neon" -delete
        find vendor -name "*.cnf" -delete
        find vendor -name "*.tool-versions" -delete
        find vendor -name "*.pubkey" -delete
        find vendor -name "*.sarif" -delete
        find vendor -name "*.bat" -delete
        find vendor -name "*.sh" -delete
        find vendor -name "*.phar" -delete
        find vendor -name "*.xlsx" -delete
        find vendor -name "*.xls" -delete
        find vendor -name "*.csv" -delete
        
        # Remove test directories
        find vendor -type d -name "*test*" -exec rm -rf {} + 2>/dev/null || true
        find vendor -type d -name "*docs*" -exec rm -rf {} + 2>/dev/null || true
        find vendor -type d -name "*examples*" -exec rm -rf {} + 2>/dev/null || true
        find vendor -type d -name "*guides*" -exec rm -rf {} + 2>/dev/null || true
        find vendor -type d -name ".github" -exec rm -rf {} + 2>/dev/null || true
        
        # Remove bin directory
        rm -rf vendor/bin
        
        # Create the final archive
        cd /tmp/plugin-build
        zip -r network-site-details.zip network-site-details/
        
        # Move back to workspace
        mv network-site-details.zip $GITHUB_WORKSPACE/
        
    - name: Get plugin version
      id: version
      run: |
        VERSION=$(grep "Version:" network-site-details.php | sed 's/.*Version: *//' | sed 's/ *\*\/.*//')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Plugin version: $VERSION"
        
    - name: Calculate archive size
      id: size
      run: |
        SIZE=$(ls -lah network-site-details.zip | awk '{print $5}')
        echo "size=$SIZE" >> $GITHUB_OUTPUT
        echo "Archive size: $SIZE"
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}-${{ github.run_number }}
        release_name: Network Site Details v${{ steps.version.outputs.version }}
        body: |
          ## WordPress Plugin: Network Site Details v${{ steps.version.outputs.version }}
          
          ### ðŸ“¦ Download
          Download the `network-site-details.zip` file below and upload it to your WordPress admin panel.
          
          ### ðŸ“Š Archive Details
          - **Size**: ${{ steps.size.outputs.size }}
          - **Vendor libraries**: Included and optimized
          - **WordPress.org ready**: Yes
          
          ### ðŸš€ Features
          - Displays post count and visitor statistics for multisite networks
          - Export data to Excel using PHPSpreadsheet
          - Interactive charts with Chart.js
          - Google API integration ready
          
          ### ðŸ”§ Installation
          1. Download the ZIP file
          2. Go to WordPress Admin â†’ Plugins â†’ Add New â†’ Upload Plugin
          3. Select the ZIP file and click "Install Now"
          4. Activate the plugin
          
          ### ðŸ“‹ Requirements
          - WordPress Multisite
          - PHP 8.1 or higher
          - Network Admin access
          
          ---
          **Note**: This archive includes all required vendor libraries and is ready for production use.
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./network-site-details.zip
        asset_name: network-site-details.zip
        asset_content_type: application/zip
        
    - name: Upload to Artifacts (Backup)
      uses: actions/upload-artifact@v3
      with:
        name: network-site-details-plugin
        path: network-site-details.zip
        retention-days: 30
